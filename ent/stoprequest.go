// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sms-sender/ent/stoprequest"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StopRequest is the model entity for the StopRequest schema.
type StopRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Recipient holds the value of the "recipient" field.
	Recipient string `json:"recipient,omitempty"`
	// StopDate holds the value of the "stop_date" field.
	StopDate     time.Time `json:"stop_date,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StopRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stoprequest.FieldID:
			values[i] = new(sql.NullInt64)
		case stoprequest.FieldRecipient:
			values[i] = new(sql.NullString)
		case stoprequest.FieldStopDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StopRequest fields.
func (sr *StopRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stoprequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int(value.Int64)
		case stoprequest.FieldRecipient:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recipient", values[i])
			} else if value.Valid {
				sr.Recipient = value.String
			}
		case stoprequest.FieldStopDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stop_date", values[i])
			} else if value.Valid {
				sr.StopDate = value.Time
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StopRequest.
// This includes values selected through modifiers, order, etc.
func (sr *StopRequest) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// Update returns a builder for updating this StopRequest.
// Note that you need to call StopRequest.Unwrap() before calling this method if this StopRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *StopRequest) Update() *StopRequestUpdateOne {
	return NewStopRequestClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the StopRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *StopRequest) Unwrap() *StopRequest {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: StopRequest is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *StopRequest) String() string {
	var builder strings.Builder
	builder.WriteString("StopRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("recipient=")
	builder.WriteString(sr.Recipient)
	builder.WriteString(", ")
	builder.WriteString("stop_date=")
	builder.WriteString(sr.StopDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StopRequests is a parsable slice of StopRequest.
type StopRequests []*StopRequest
