// Code generated by ent, DO NOT EDIT.

package stoprequest

import (
	"sms-sender/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldLTE(FieldID, id))
}

// Recipient applies equality check predicate on the "recipient" field. It's identical to RecipientEQ.
func Recipient(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldEQ(FieldRecipient, v))
}

// StopDate applies equality check predicate on the "stop_date" field. It's identical to StopDateEQ.
func StopDate(v time.Time) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldEQ(FieldStopDate, v))
}

// RecipientEQ applies the EQ predicate on the "recipient" field.
func RecipientEQ(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldEQ(FieldRecipient, v))
}

// RecipientNEQ applies the NEQ predicate on the "recipient" field.
func RecipientNEQ(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldNEQ(FieldRecipient, v))
}

// RecipientIn applies the In predicate on the "recipient" field.
func RecipientIn(vs ...string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldIn(FieldRecipient, vs...))
}

// RecipientNotIn applies the NotIn predicate on the "recipient" field.
func RecipientNotIn(vs ...string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldNotIn(FieldRecipient, vs...))
}

// RecipientGT applies the GT predicate on the "recipient" field.
func RecipientGT(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldGT(FieldRecipient, v))
}

// RecipientGTE applies the GTE predicate on the "recipient" field.
func RecipientGTE(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldGTE(FieldRecipient, v))
}

// RecipientLT applies the LT predicate on the "recipient" field.
func RecipientLT(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldLT(FieldRecipient, v))
}

// RecipientLTE applies the LTE predicate on the "recipient" field.
func RecipientLTE(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldLTE(FieldRecipient, v))
}

// RecipientContains applies the Contains predicate on the "recipient" field.
func RecipientContains(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldContains(FieldRecipient, v))
}

// RecipientHasPrefix applies the HasPrefix predicate on the "recipient" field.
func RecipientHasPrefix(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldHasPrefix(FieldRecipient, v))
}

// RecipientHasSuffix applies the HasSuffix predicate on the "recipient" field.
func RecipientHasSuffix(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldHasSuffix(FieldRecipient, v))
}

// RecipientEqualFold applies the EqualFold predicate on the "recipient" field.
func RecipientEqualFold(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldEqualFold(FieldRecipient, v))
}

// RecipientContainsFold applies the ContainsFold predicate on the "recipient" field.
func RecipientContainsFold(v string) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldContainsFold(FieldRecipient, v))
}

// StopDateEQ applies the EQ predicate on the "stop_date" field.
func StopDateEQ(v time.Time) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldEQ(FieldStopDate, v))
}

// StopDateNEQ applies the NEQ predicate on the "stop_date" field.
func StopDateNEQ(v time.Time) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldNEQ(FieldStopDate, v))
}

// StopDateIn applies the In predicate on the "stop_date" field.
func StopDateIn(vs ...time.Time) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldIn(FieldStopDate, vs...))
}

// StopDateNotIn applies the NotIn predicate on the "stop_date" field.
func StopDateNotIn(vs ...time.Time) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldNotIn(FieldStopDate, vs...))
}

// StopDateGT applies the GT predicate on the "stop_date" field.
func StopDateGT(v time.Time) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldGT(FieldStopDate, v))
}

// StopDateGTE applies the GTE predicate on the "stop_date" field.
func StopDateGTE(v time.Time) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldGTE(FieldStopDate, v))
}

// StopDateLT applies the LT predicate on the "stop_date" field.
func StopDateLT(v time.Time) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldLT(FieldStopDate, v))
}

// StopDateLTE applies the LTE predicate on the "stop_date" field.
func StopDateLTE(v time.Time) predicate.StopRequest {
	return predicate.StopRequest(sql.FieldLTE(FieldStopDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StopRequest) predicate.StopRequest {
	return predicate.StopRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StopRequest) predicate.StopRequest {
	return predicate.StopRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StopRequest) predicate.StopRequest {
	return predicate.StopRequest(func(s *sql.Selector) {
		p(s.Not())
	})
}
