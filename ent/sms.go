// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sms-sender/ent/sms"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Sms is the model entity for the Sms schema.
type Sms struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Recipient holds the value of the "recipient" field.
	Recipient string `json:"recipient,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Commercial holds the value of the "commercial" field.
	Commercial bool `json:"commercial,omitempty"`
	// SentAt holds the value of the "sentAt" field.
	SentAt time.Time `json:"sentAt,omitempty"`
	// Status holds the value of the "status" field.
	Status       *string `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sms) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sms.FieldCommercial:
			values[i] = new(sql.NullBool)
		case sms.FieldID:
			values[i] = new(sql.NullInt64)
		case sms.FieldRecipient, sms.FieldMessage, sms.FieldStatus:
			values[i] = new(sql.NullString)
		case sms.FieldSentAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sms fields.
func (s *Sms) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sms.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case sms.FieldRecipient:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recipient", values[i])
			} else if value.Valid {
				s.Recipient = value.String
			}
		case sms.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				s.Message = value.String
			}
		case sms.FieldCommercial:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field commercial", values[i])
			} else if value.Valid {
				s.Commercial = value.Bool
			}
		case sms.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sentAt", values[i])
			} else if value.Valid {
				s.SentAt = value.Time
			}
		case sms.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = new(string)
				*s.Status = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sms.
// This includes values selected through modifiers, order, etc.
func (s *Sms) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Sms.
// Note that you need to call Sms.Unwrap() before calling this method if this Sms
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sms) Update() *SmsUpdateOne {
	return NewSmsClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sms entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sms) Unwrap() *Sms {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sms is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sms) String() string {
	var builder strings.Builder
	builder.WriteString("Sms(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("recipient=")
	builder.WriteString(s.Recipient)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(s.Message)
	builder.WriteString(", ")
	builder.WriteString("commercial=")
	builder.WriteString(fmt.Sprintf("%v", s.Commercial))
	builder.WriteString(", ")
	builder.WriteString("sentAt=")
	builder.WriteString(s.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// SmsSlice is a parsable slice of Sms.
type SmsSlice []*Sms
