// Code generated by ent, DO NOT EDIT.

package sms

import (
	"sms-sender/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldID, id))
}

// Recipient applies equality check predicate on the "recipient" field. It's identical to RecipientEQ.
func Recipient(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldRecipient, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldMessage, v))
}

// Commercial applies equality check predicate on the "commercial" field. It's identical to CommercialEQ.
func Commercial(v bool) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldCommercial, v))
}

// SentAt applies equality check predicate on the "sentAt" field. It's identical to SentAtEQ.
func SentAt(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldSentAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldStatus, v))
}

// RecipientEQ applies the EQ predicate on the "recipient" field.
func RecipientEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldRecipient, v))
}

// RecipientNEQ applies the NEQ predicate on the "recipient" field.
func RecipientNEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldRecipient, v))
}

// RecipientIn applies the In predicate on the "recipient" field.
func RecipientIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldRecipient, vs...))
}

// RecipientNotIn applies the NotIn predicate on the "recipient" field.
func RecipientNotIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldRecipient, vs...))
}

// RecipientGT applies the GT predicate on the "recipient" field.
func RecipientGT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldRecipient, v))
}

// RecipientGTE applies the GTE predicate on the "recipient" field.
func RecipientGTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldRecipient, v))
}

// RecipientLT applies the LT predicate on the "recipient" field.
func RecipientLT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldRecipient, v))
}

// RecipientLTE applies the LTE predicate on the "recipient" field.
func RecipientLTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldRecipient, v))
}

// RecipientContains applies the Contains predicate on the "recipient" field.
func RecipientContains(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContains(FieldRecipient, v))
}

// RecipientHasPrefix applies the HasPrefix predicate on the "recipient" field.
func RecipientHasPrefix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasPrefix(FieldRecipient, v))
}

// RecipientHasSuffix applies the HasSuffix predicate on the "recipient" field.
func RecipientHasSuffix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasSuffix(FieldRecipient, v))
}

// RecipientEqualFold applies the EqualFold predicate on the "recipient" field.
func RecipientEqualFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEqualFold(FieldRecipient, v))
}

// RecipientContainsFold applies the ContainsFold predicate on the "recipient" field.
func RecipientContainsFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContainsFold(FieldRecipient, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContainsFold(FieldMessage, v))
}

// CommercialEQ applies the EQ predicate on the "commercial" field.
func CommercialEQ(v bool) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldCommercial, v))
}

// CommercialNEQ applies the NEQ predicate on the "commercial" field.
func CommercialNEQ(v bool) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldCommercial, v))
}

// SentAtEQ applies the EQ predicate on the "sentAt" field.
func SentAtEQ(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldSentAt, v))
}

// SentAtNEQ applies the NEQ predicate on the "sentAt" field.
func SentAtNEQ(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldSentAt, v))
}

// SentAtIn applies the In predicate on the "sentAt" field.
func SentAtIn(vs ...time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldSentAt, vs...))
}

// SentAtNotIn applies the NotIn predicate on the "sentAt" field.
func SentAtNotIn(vs ...time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldSentAt, vs...))
}

// SentAtGT applies the GT predicate on the "sentAt" field.
func SentAtGT(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldSentAt, v))
}

// SentAtGTE applies the GTE predicate on the "sentAt" field.
func SentAtGTE(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldSentAt, v))
}

// SentAtLT applies the LT predicate on the "sentAt" field.
func SentAtLT(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldSentAt, v))
}

// SentAtLTE applies the LTE predicate on the "sentAt" field.
func SentAtLTE(v time.Time) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldSentAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Sms {
	return predicate.Sms(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Sms {
	return predicate.Sms(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Sms {
	return predicate.Sms(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Sms {
	return predicate.Sms(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Sms {
	return predicate.Sms(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Sms {
	return predicate.Sms(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Sms {
	return predicate.Sms(sql.FieldContainsFold(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sms) predicate.Sms {
	return predicate.Sms(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sms) predicate.Sms {
	return predicate.Sms(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sms) predicate.Sms {
	return predicate.Sms(func(s *sql.Selector) {
		p(s.Not())
	})
}
