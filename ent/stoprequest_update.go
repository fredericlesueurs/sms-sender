// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sms-sender/ent/predicate"
	"sms-sender/ent/stoprequest"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StopRequestUpdate is the builder for updating StopRequest entities.
type StopRequestUpdate struct {
	config
	hooks    []Hook
	mutation *StopRequestMutation
}

// Where appends a list predicates to the StopRequestUpdate builder.
func (sru *StopRequestUpdate) Where(ps ...predicate.StopRequest) *StopRequestUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetRecipient sets the "recipient" field.
func (sru *StopRequestUpdate) SetRecipient(s string) *StopRequestUpdate {
	sru.mutation.SetRecipient(s)
	return sru
}

// SetStopDate sets the "stop_date" field.
func (sru *StopRequestUpdate) SetStopDate(t time.Time) *StopRequestUpdate {
	sru.mutation.SetStopDate(t)
	return sru
}

// SetNillableStopDate sets the "stop_date" field if the given value is not nil.
func (sru *StopRequestUpdate) SetNillableStopDate(t *time.Time) *StopRequestUpdate {
	if t != nil {
		sru.SetStopDate(*t)
	}
	return sru
}

// Mutation returns the StopRequestMutation object of the builder.
func (sru *StopRequestUpdate) Mutation() *StopRequestMutation {
	return sru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *StopRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *StopRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *StopRequestUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *StopRequestUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sru *StopRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(stoprequest.Table, stoprequest.Columns, sqlgraph.NewFieldSpec(stoprequest.FieldID, field.TypeInt))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.Recipient(); ok {
		_spec.SetField(stoprequest.FieldRecipient, field.TypeString, value)
	}
	if value, ok := sru.mutation.StopDate(); ok {
		_spec.SetField(stoprequest.FieldStopDate, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stoprequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// StopRequestUpdateOne is the builder for updating a single StopRequest entity.
type StopRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StopRequestMutation
}

// SetRecipient sets the "recipient" field.
func (sruo *StopRequestUpdateOne) SetRecipient(s string) *StopRequestUpdateOne {
	sruo.mutation.SetRecipient(s)
	return sruo
}

// SetStopDate sets the "stop_date" field.
func (sruo *StopRequestUpdateOne) SetStopDate(t time.Time) *StopRequestUpdateOne {
	sruo.mutation.SetStopDate(t)
	return sruo
}

// SetNillableStopDate sets the "stop_date" field if the given value is not nil.
func (sruo *StopRequestUpdateOne) SetNillableStopDate(t *time.Time) *StopRequestUpdateOne {
	if t != nil {
		sruo.SetStopDate(*t)
	}
	return sruo
}

// Mutation returns the StopRequestMutation object of the builder.
func (sruo *StopRequestUpdateOne) Mutation() *StopRequestMutation {
	return sruo.mutation
}

// Where appends a list predicates to the StopRequestUpdate builder.
func (sruo *StopRequestUpdateOne) Where(ps ...predicate.StopRequest) *StopRequestUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *StopRequestUpdateOne) Select(field string, fields ...string) *StopRequestUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated StopRequest entity.
func (sruo *StopRequestUpdateOne) Save(ctx context.Context) (*StopRequest, error) {
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *StopRequestUpdateOne) SaveX(ctx context.Context) *StopRequest {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *StopRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *StopRequestUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sruo *StopRequestUpdateOne) sqlSave(ctx context.Context) (_node *StopRequest, err error) {
	_spec := sqlgraph.NewUpdateSpec(stoprequest.Table, stoprequest.Columns, sqlgraph.NewFieldSpec(stoprequest.FieldID, field.TypeInt))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StopRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stoprequest.FieldID)
		for _, f := range fields {
			if !stoprequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stoprequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.Recipient(); ok {
		_spec.SetField(stoprequest.FieldRecipient, field.TypeString, value)
	}
	if value, ok := sruo.mutation.StopDate(); ok {
		_spec.SetField(stoprequest.FieldStopDate, field.TypeTime, value)
	}
	_node = &StopRequest{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stoprequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
